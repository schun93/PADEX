// Model Tables

[ Dungeon | id:PK.Int; name:String; random_encounters:list(backref.EnemyMonster); major_encounters:list(backref.EnemyMonster) ]

[ EnemyMonster | id:PK.Int; hp:Int; atk:Int; defn:Int; turn:Int; floor:Int; quantity:Int; monster:Monster; dungeon_id:FK.Dungeon.id; primary_type_id:FK.Type.id; secondary_type_id:FK.Type.id; ternary_type_id:Type; moves:list(backref.EnemyMonsterMove) ]

[ EnemyMonsterMove | id:PK.Int; dungeon_monster_id:FK.EnemyMonster.id; atk:Int; attack_condition:String; skill:backref.EnemySkill ]

[ EnemySkill | id:PK.Int; name:String; effect:String; owned_by_monsters:list(FK.Monster.id) ]

[ EnemySkill-Monster-N | id:PK.Int; enemy_skill_id:FK.EnemySkill.id; monster_id:FK.Monster.id ]

[ Type | id:PK.Int; name:String; owned_by_monsters:list(backref.Monster) ]

[ Element | id:PK.Int; name:String; owned_by_monsters:list(backref.Monster) ]

[ MonsterSeries | id:PK.Int; name:String; monsters_in_series:list(backref.Monster) ]

[ ActiveSkill | id:PK.Int; name:String; effect:String; original_effect:String; max_cd:Int; min_cd:Int; max_lvl:Int; owned_by_monsters:list(backref.Monster) ]

[ LeaderSkill | id:PK.Int; name:String; effect:String; original_effect:String; owned_by_monsters:list(backref.Monster) ]

[ AwokenSkill | id:PK.Int; name:String; description:String; owned_by_monsters:list(FK.Monster.id) ]

[ AwokenSkill-Monster-N | id:PK.Int; awoken_skill_id:FK.AwokenSkill.id; monster_id:FK.Monster.id ]

[ Monster | id:PK.Int; name:String; primary_type: backref.Type; secondary_type: backref.Type; primary_element:backref.Element; secondary_element:backref.Element; rarity:Int; team_cost:Int; sells_for_monster_points:Int; evolves_to:list(FK.Monster.id); evolves_from:FK.Monster.id; min_lvl:Int; max_lvl:Int; min_hp:Int; max_hp:Int; min_atk:Int; max_atk:Int; min_defn:Int; max_defn:Int; min_rcv:Int; max_rcv:Int; min_sell_value:Int; max_sell_value:Int; min_exp_feed:Int; max_exp_feed:Int; exp_needed:Int; active_skill:backref.ActiveSkill; leader_skill:backref.LeaderSkill; awoken_skills:list(FK.AwokenSkill.id); obtainable_in_dungeons:list(FK.EnemyMonster.dungeon_id); series_id:list(FK.MonsterSeries.id); enemy_skills:list(FK.EnemySkill.id) ]


// Dungeon UML

[Dungeon]1-*[EnemyMonster]
[EnemyMonster]1-*[EnemyMonsterMove]
[EnemyMonster]*-1[Monster]
[EnemySkill]1-*[EnemySkill-Monster-N]
[EnemyMonsterMove]*-1[EnemySkill]


// Monster UML

[Monster]1-*[EnemySkill-Monster-N]
[Monster]1-*[AwokenSkill-Monster-N]


// Type UML

[Type]1..3-*[Monster]


// Element UML

[Element]1..2-*[Monster]


// Monster-Series UML

[MonsterSeries]1-*[Monster]


// Active-Skill UML

[ActiveSkill]1-*[Monster]


// Leader-Skill UML

[LeaderSkill]1-*[Monster]


// Awoken-Skill UML

[AwokenSkill]1-*[AwokenSkill-Monster-N]

